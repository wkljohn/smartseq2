/*
 * -------------------------------------------------
 *  nf-core/smartseq2 Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {
  
  // Choose between "symlink" - absolute path, "rellink" -relative path, "link " -hard link, "copy"
  publish_dir_mode="symlink" 

  // Workflow flags
  // TODO nf-core: Specify your pipeline's command line flags
  reads = "data/*{1,2}.fastq.gz"
  readPaths = false

  //References
  genome = false
  star_index = false
  gtf = false 
  rsem_ref = false 
  fasta = false
  species = "Hsap"
  save_reference = false

  //Skipping
  skip_fastqc = false
  skip_transcriptomics = false
  skip_fc = false
  skip_rsem = false
  skip_tracer = true
  skip_bracer = true

  // Boilerplate options
  outdir = './results'
  name = false
  multiqc_config = false
  email = false
  max_multiqc_email_size = 25.MB
  plaintext_email = false
  monochrome_logs = false
  help = false
  igenomes_base = "./iGenomes"
  tracedir = "${params.outdir}/pipeline_info"
  awsqueue = false
  awsregion = 'eu-west-1'
  igenomes_ignore = false
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false
}


process {
  // Container slug. Stable releases should specify release tag!
  // Developmental code should specify :dev
  container = 'nfcore/smartseq2:dev'
  withLabel:tracer {
    container = 'icbi/tracer'
  }
  withLabel:bracer {
    container = 'icbi/bracer'
  }
}



// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  awsbatch { includeConfig 'conf/awsbatch.config' }
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker { docker.enabled = true }
  singularity { 
    singularity.enabled = true 
    singularity.autoMounts = true
  }
  test { includeConfig 'conf/test.config' }
  test_bracer { includeConfig 'conf/test_bracer.config' }
  test_tracer { includeConfig 'conf/test_tracer.config' }
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
  includeConfig 'conf/igenomes.config'
}

// Export this variable to prevent local Python libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/smartseq2'
  author = 'Sandro Carollo, Georgios Fotakis and Gregor Sturm'
  homePage = 'https://github.com/nf-core/smartseq2'
  description = 'Preprocess scRNA-seq data generated with the SmartSeq2 protocol'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
